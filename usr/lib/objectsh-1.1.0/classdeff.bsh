#!/bin/bash

#[of]:description
#[c]a class is composed of
#[c]  class_constructor  -- defines the class methods
#[c]  static_constructor -- defines the static object methods
#[c]  constructor        -- defines the (dynamic) object methods
#[c]
#[c]  class_variables  -- exist for the life of the class, which is forever after the first object has been defined.
#[c]  object_variables -- these variable are static between object method calls.  i.e. their values are not lost between calls
#[c]  method_variables -- these variable are localy scoped and are forgotten between object method calls
#[c]
#[c]  destructor -- destroys an object and everything chained within the object
#[c]                  used to destroy special structures not normally caught by the class level destructor
#[c]
#[c]
#[c]what is a
#[c]  class method;
#[c]    is defined/created only once when the first object is defined
#[c]    is called by prefixing the method with the class name "myclass.mymethod"
#[c]    there is no extra over head calling these methods
#[c]  static method:
#[c]    is defined/created only once when the first object is defined
#[c]    is called by prefixing the method with the object name "myobject.mymethod"
#[c]    these methods must resolve the object name before they run
#[c]  (dynamic) method:
#[c]    a copy is defined/created for each object defined
#[c]    is called by prefixing the method with the object name "myobject.mymethod"
#[c]    there is no extra over head calling these methods
#[c]
#[c]
#[c]when to maybe use a
#[c]  class method:
#[c]    if the method
#[c]      reads/modifies any object data = no
#[c]      is needed for a the class but is not specific to any object = yes
#[c]      is ever called outside of an object = yes, but the class must be defined first by creating a new object
#[c]  static method:
#[c]    if the method
#[c]      runs infrequently = yes
#[c]      is large/more than a few lines = yes
#[c]      requires local vars = yes
#[c]  (dynamic) method:
#[c]    if the method:
#[c]      is a few lines or less = yes
#[c]      runs frequently = yes
#[c]
#[c]extended classes
#[c]  Definitions:
#[c]    A class that is derived from another class is called a subclass (also a derived 
#[c]    class, extended class, or child class). The class from which the subclass is derived 
#[c]    is called a superclass (also a base class or a parent class).
#[c]
#[c]  all base class (dynamic) methods are overwritten by sub class methods
#[c]  all base class links to static methods are overwritten by sub class static methods
#[c]  base class static methods can be called directly by name or with the following buildup
#[c]    ${d}{${cm}baseClass}.${m} ${o} ${q}${d}@${q}
#[c]  base class static methods can detect a call from a sub class with this with the following buildup
#[c]    ## true only if the object class is not the same as this static methods class
#[c]    [ ${q}${c}${q} != ${q}${smc}${q} ] && { ;; }
#[c]  
#[cf]
#[of]:todo
#[cf]
#[of]:setup globals
gl_classpath=${gl_objectshbase}/common
#[cf]
#[of]:functions
#[of]:base
shopt -s extglob
#[l]:string:common/base/string-2.0.1.sh
. ${gl_classpath}/base/string-2.0.1.sh
#[l]:array:common/base/array-2.0.0.sh
. ${gl_classpath}/base/array-2.0.0.sh
#[l]:hash:common/base/hash-1.2.0.sh
. ${gl_classpath}/base/hash-1.2.0.sh
#[l]:test:common/base/test-2.2.0.sh
. ${gl_classpath}/base/test-2.2.0.sh
#[l]:file:common/base/file-3.1.0.sh
. ${gl_classpath}/base/file-3.1.0.sh
#[l]:die:common/base/die-2.0.0.sh
. ${gl_classpath}/base/die-2.0.0.sh
#[l]:errorlevel:common/base/errorlevel-0.1.0.sh
. ${gl_classpath}/base/errorlevel-0.1.0.sh
#[l]:msgdbg:common/base/msgdbg-2.0.1.sh
. ${gl_classpath}/base/msgdbg-2.0.1.sh
#[cf]
#[of]:function include {
function include {
  typeset _include
  _include="${1%.sclass}"
  isfnset ${_include}.constructor && return 0
  if [[ -n "${_include##*/*}" ]] ; then
    . "${gl_objectshbase%/}/sclass/${_include}.sclass"
  else
    . ${_include}.sclass
  fi
}
#[cf]
#[of]:function destroy {
function destroy {
  [[ -z "$1" ]] && return 1
  while [[ -n "$1" ]] ; do
#[of]:    set common environment
#[l]:classcommonenv.sh:/usr/lib/objectsh-1/common/classcommonenv.sh
  . ${gl_classpath}/classcommonenv.sh
#[cf]
    #echo destroying ${o}
    hashdelkey ${cm}index ${o}
    ${c}.destructor ${o}
  done
}
#[cf]
#[of]:function new {
function new {
#[c]classname objectname
  typeset c o
  c="$1"
  o="$2"

if [[ "${FUNCNAME[0]}" != "${FUNCNAME[1]}" ]] ; then
#[of]:  error if object is already defined
  if isfnset "${o}" ; then
    echo "error an object named ${o} already exist"
    exit 1
  fi
#[cf]
fi
#[of]:error if no constructor
  if ! isfnset "${c}.constructor" ; then
    echo "creation of object \"${o}\" failed, no class type of \"${c}\" has been defined"
    exit 1
  fi
#[cf]
if [[ "${FUNCNAME[0]}" != "${FUNCNAME[1]}" ]] ; then
  typeset e
  e="${c}"
fi
shift
if eval "[[ -n \"\${${c}_cm_baseClass}\" ]]" ; then
  eval "new \${${c}_cm_baseClass} \"\$@\"" || return $?
fi

#[of]:  create object
#echo creating ${o}
#[of]:clean object environment
#eval "unset ${o} \${!${o}_om_*} \${!${o}_ov_*}"
#[cf]
#[of]:register object with parent
if isset om && [[ "${m}" != "classconstructor" ]] ; then
  hashsetkey ${om}children ${o} ""
  eval "${o}_om_objectparent=${om%_om_}"
fi
#[cf]
#[of]:save objectclass into object
  eval "${o}_om_objectclass=${c}"
#[cf]
#[of]:set common environment
#[l]:classcommonenv.sh:/usr/lib/objectsh-1/common/classcommonenv.sh
  . ${gl_classpath}/classcommonenv.sh
#[cf]
#[of]:define object meta - variable list storage
#[c]Associative arrays are local by default
declare -gA ${om}variables
#[cf]
#[of]:save objectsname into object
  eval "${om}objectname=${o}"
#[cf]
#[of]:define meta if first object
if isset ${cm}methods ; then
#[of]:  create object
#[of]:  construct static methods
  isfnset ${c}.staticconstructor && ${c}.staticconstructor ${o}
#[cf]
#[of]:  construct dynamic methods
  newObjectConstructorCallout "${@}"
#[cf]
#[cf]
else
#[of]:  create object + meta
#[of]:  construct static methods
if isfnset ${c}.staticconstructor ; then
#[c]  a dynamic function that creates a dynamic function that creates object functions/aliases
  ${c}.staticconstructor
  typeset i f
  f="function ${c}.staticconstructor {
  eval \"
"
  while read i ; do
    i="${i##* }"
    [[ "${i}" == ${c}.*(static|class)constructor ]] && continue
    if [[ -z "${i##${c}.*}" ]] ; then
      f="${f}    function \${o}.${i##*.} {
      ${i} \${o} \${q}\${d}@\${q}
    }
"
    fi
  done < <(typeset -F)
  f="${f}
  \"
}"
  eval "${f}"
  ${c}.staticconstructor ${o}
fi
#[cf]
#[of]:  construct class methods
if isfnset ${c}.classconstructor ; then
  ${c}.classconstructor ${o}
  unset -f ${c}.classconstructor
fi
#[cf]
#[of]:  construct default class methods
#[of]:${c}.objectcount
    if ! isfnset "${c}.objectcount" ; then
      eval "
        function ${c}.objectcount {
#[c]          [!|-|var]
          hashgetsize ${d}{1:--} ${cm}index
        }
      "
    fi
#[cf]
#[of]:${c}.objectlist
    if ! isfnset "${c}.objectlist" ; then
      eval "
        function ${c}.objectlist {
#[c]          [!|-|var]
          hashkeys ${d}{1:--} ${cm}index
        }
      "
    fi
#[cf]
#[of]:${c}.destructor
    if ! isfnset "${c}.destructor" ; then
      eval "
        function ${c}.destructor {
#[c]          object
#[l]:          classcommonenv.sh:common/classcommonenv.sh
          . ${d}{gl_classpath}/classcommonenv.sh
          #echo destructing object ${d}{o} of class ${d}{c}
          eval ${q}
            typeset i
#[of]:            recursively call child destructors
    destroy \${d}(hashkeys - \${om}children)
#[cf]
#[of]:            call object destructor
            isfnset \${o}.destructor && \${o}.destructor
#[cf]
#[of]:            destroy object functions
    isset \${om}objectparent && hashdelkey \${d}{\${om}objectparent}_om_children \${o}
    unset -f \${o} \${d}{\${cm}methods[@]/#/\${o}.}
#[cf]
#[of]:            destroy object vars
    #unset \${o} \${d}{!\${om}*} \${d}{!\${ov}*}
    unset \${o}
    unset \${d}{!\${om}variables[@]} \${om}variables
    unset \${om}objectclass \${om}objectname \${om}objectparent
#[cf]
          ${q}
        }
      "
    fi
#[cf]
#[cf]
#[of]:  construct dynamic methods
  newObjectConstructorCallout "${@}"
  typeset i
  while read i ; do
    i="${i##* }"
    if [[ -z "${i##${o}.*}" ]] ; then
      apush ${cm}methods ${i##*.}
    fi
  done < <(typeset -F)
#[cf]
#[cf]
fi
#[cf]
#[cf]
#[of]:  save objectname into list
  ##save objectname into class object list
  if [[ "${FUNCNAME[0]}" != "${FUNCNAME[1]}" ]] ; then
    hashsetkey ${cm}index ${o} ""
  fi
#[cf]
}
#[cf]
#[of]:function newObjectConstructorCallout {
function newObjectConstructorCallout {
## this is done because we can not set a global variable in a function
##   and then declare the same variable as a local while still in that function
  typeset ${om}objectclass
  eval ${om}objectclass=\"\${e}\"
  ${c}.constructor ${o} "${@}"
#[of]:  ${o}
  if ! isfnset "${o}" ; then
    eval "
      function ${o} {
        die 1 ${q}the object \\${q}${o}\\${q} of class \\${q}${e}\\${q} does not support operator calls${q}
      }
    "
  fi
#[cf]
}
#[cf]
#[of]:function newvar {
function newvar {
  isset om || die 1 "newvar must be called within a method"
  typeset i
  for i ; do
    eval "${om}variables[\${i}]=''"
    unset ${i}
  done
}
#[cf]
#[of]:function newPublicVar {
function newPublicVar {
  isset om || die 1 "newPublicVar must be called within a method"
  typeset _i
  for _i in $@ ; do
    eval "
      newvar ${ov}${_i}
      if ! isfnset ${q}${o}.set${_i^}${q} ; then
        function ${o}.set${_i^} {
          ${ov}${_i}=${q}${d}1${q}
        }
      fi

      if ! isfnset ${q}${o}.get${_i^}${q} ; then
        function ${o}.get${_i^} {
          if [[ ${q}${d}1${q} = ${q}-${q} ]] ; then
            echo ${q}${d}{${ov}${_i}}${q}
          else
            eval ${d}1=\\${q}\\${d}{${ov}${_i}}\\${q}
          fi
        }
      fi
    "
  done
}
#[cf]
#[cf]
